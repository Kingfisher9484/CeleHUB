npm create vite@latest CeleHUB --template react
>>  cd CeleHUB
>>  npm install
>>  npm run dev

>> npm install react-router-dom firebase axios
>> npm install lucide-react
>> npm install react-icons
>> npm install react-calendar
>> npm i bootstrap@5.3.3 
>> npm i bootstrap-icons
>> npm install razorpay 
>> npm install bootstrap react-bootstrap
>> npm install framer-motion
>> npm install axios
>>npm install jspdf jspdf-autotable//removes because occurs error
>>npm install @react-pdf/renderer
>>npm install html2pdf.js
>>>>npm install jspdf jspdf-autotable emailjs-com

>> 45 packages are looking for funding
  run `npm fund` for details

>> 1 moderate severity vulnerability
To address all issues, run:
  >> npm audit fix

Git comment
Dell@DESKTOP-8DI3VB6 MINGW64 ~/Desktop/CeleHUB-MyProject/CeleHUB (main)
$ git add .

Dell@DESKTOP-8DI3VB6 MINGW64 ~/Desktop/CeleHUB-MyProject/CeleHUB (main)
$ git commit -m "forth"
[main b0cc8b4] forth
 1 file changed, 10 insertions(+)

Dell@DESKTOP-8DI3VB6 MINGW64 ~/Desktop/CeleHUB-MyProject/CeleHUB (main)
$ git push origin main



firestore rule
new.....................
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 🔁 Admin Role Helper Function
		function isAdmin() {
  		return request.auth != null &&
    		get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
		}

		// 🔹 Users Collection
		match /users/{userId} {
  		allow read: if isAdmin() || request.auth.uid == userId; // admin can read all
  		allow update: if request.auth.uid == userId;
  		allow create: if request.auth != null;	
	}



    // 🔹 Events Collection (Admins Only)
    match /events/{eventId} {
      allow read: if true;
 			allow write, create, update, delete: if request.auth != null 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
      
      allow create: if isAdmin()
        && request.resource.data.eventName is string
        && request.resource.data.type is string
        && request.resource.data.range in ["Normal", "Medium", "Luxury"]
        && request.resource.data.description is string
        && request.resource.data.price is number
        && request.resource.data.price >= 100
        && request.resource.data.price <= 100000
        && request.resource.data.createdAt is timestamp
        && request.resource.data.mediaUrl is string;

      allow update: if isAdmin()
        && request.resource.data.range in ["Normal", "Medium", "Luxury"]
        && request.resource.data.price is number
        && request.resource.data.price >= 100
        && request.resource.data.price <= 100000
        && request.resource.data.mediaUrl is string
        && request.resource.data.keys().hasOnly([
          "eventName", "type", "range", "description", "price", "mediaUrl", "createdAt"
        ]);

      allow delete: if isAdmin();
    }

    // 🔹 Bookings Collection
    match /bookings/{bookingId} {
      // ✅ Users can read their own booking
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;

      // ✅ Users can list their own bookings (secure filtering client-side)
      allow list: if request.auth != null;

      // ✅ Users can create a booking
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.userId
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && exists(/databases/$(database)/documents/events/$(request.resource.data.eventId))
        && request.resource.data.eventId is string
        && request.resource.data.eventName is string
        && request.resource.data.eventType is string
        && request.resource.data.eventDate is string // ISO format assumed
        && request.resource.data.price is number
        && request.resource.data.price >= 0
        && request.resource.data.paymentStatus is string
        && request.resource.data.paymentStatus in ["pending", "paid"];

      // ✅ Admin can get and list all bookings
      allow get, list: if isAdmin();

      // ✅ Admin can update only specific fields
      allow update: if isAdmin()
        && (request.resource.data.keys().hasOnly(["viewedByAdmin", "acceptBooking"]) ||
            request.resource.data.diff(resource.data).changedKeys().hasOnly(["viewedByAdmin", "acceptBooking"]))
        && (
          !("viewedByAdmin" in request.resource.data) || request.resource.data.viewedByAdmin is bool
        )
        && (
          !("acceptBooking" in request.resource.data) || request.resource.data.acceptBooking in ["pending", "accepted", "rejected"]
        );

      // ✅ Admin can delete bookings
      allow delete: if isAdmin();
    }

    // Offers: Read for everyone, Write for Admins only
    match /adminSettings/offer/data/{offerId} {
      allow read: if true; // public access to view offers

      allow create, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    // 🔹 Ratings Collection
    match /ratings/{ratingId} {
      allow read: if request.auth != null;

      allow create, update: if request.auth != null
        && request.resource.data.userId == request.auth.uid
        && ratingId == (request.resource.data.eventId + "_" + request.auth.uid)
        && request.resource.data.rating is number
        && request.resource.data.rating >= 1
        && request.resource.data.rating <= 5
        && request.resource.data.label is string;

      allow delete: if false;
    }

  

    // 🔹 Stories Collection
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update, delete: if false;
    }
      match /comments/{commentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    match /adminPayment/{docId} {
      allow read: if request.auth != null;
      allow write, update: if isAdmin();
    }
  }
}
